<!doctype html>
<h1><b>Writing Focus</b></h1>
<html lang="en">

<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">

<%-include('../partials/navbar') -%>
<link rel="stylesheet" href="/css/timer.css">
<script src="/js/timer.js"></script>
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
<div class="timer"></div>
<link rel="stylesheet" href="/css/about.css">

<div class="container-fluid">

  <br>

  <style>
    .speech {
      border: 1px solid #ddd;
      width: 300px;
      padding: 0;
      margin: 0;
    }

    .speech input {
      border: 0;
      width: 240px;
      display: inline-block;
      height: 30px;
      font-size: 14px;
    }

    .speech img {
      float: right;
      width: 40px;
    }
  </style>

  <form id="labnol" method="get" action="http://www.labnol.org">
    <div class="speech">
      <input type="text" name="s" id="transcript" placeholder="Speak your Writing!" />
      <img onclick="startDictation()" src="https://i.imgur.com/cHidSVu.gif" />
    </div>
  </form>

  <script>
    function startDictation() {
      if (window.hasOwnProperty('webkitSpeechRecognition')) {
        var recognition = new webkitSpeechRecognition();

        recognition.continuous = false;
        recognition.interimResults = false;
        recognition.lang = 'en-US';
        recognition.start();

        recognition.onresult = function (e) {
          document.getElementById('transcript').value = e.results[0][0].transcript;
          recognition.stop();
          document.getElementById('labnol').submit();
        };
        recognition.onerror = function (e) {
          recognition.stop();
        };
      }
    }
  </script>
  <br><br>
  <style>
  body {
    background: #dddddd;
    margin: 24px;
  }

  .timer {
    font-family: sans-serif;
    display: inline-block;
    padding: 24px 32px;
    border-radius: 30px;
    background: white;
  }

  .timer__part {
    font-size: 36px;
    font-weight: bold;
  }

  .timer__btn {
    width: 50px;
    height: 50px;
    margin-left: 16px;
    border-radius: 50%;
    border: none;
    color: white;
    background: #8208e6;
    cursor: pointer;
  }

  .timer__btn--start {
    background: #00b84c;
  }

  .timer__btn--stop {
    background: #ff0256;
  }

  </style>
  <div class="timer"></div>
  <script>
  class Timer {
    constructor(root) {
      root.innerHTML = Timer.getHTML();

      this.el = {
        minutes: root.querySelector(".timer__part--minutes"),
        seconds: root.querySelector(".timer__part--seconds"),
        control: root.querySelector(".timer__btn--control"),
        reset: root.querySelector(".timer__btn--reset")
      };

      this.interval = null;
      this.remainingSeconds = 0;

      this.el.control.addEventListener("click", () => {
        if (this.interval === null) {
          this.start();
        } else {
          this.stop();
        }
      });

      this.el.reset.addEventListener("click", () => {
        const inputMinutes = prompt("Enter number of minutes:");

        if (inputMinutes < 60) {
          this.stop();
          this.remainingSeconds = inputMinutes * 60;
          this.updateInterfaceTime();
        }
      });
    }

    updateInterfaceTime() {
      const minutes = Math.floor(this.remainingSeconds / 60);
      const seconds = this.remainingSeconds % 60;

      this.el.minutes.textContent = minutes.toString().padStart(2, "0");
      this.el.seconds.textContent = seconds.toString().padStart(2, "0");
    }

    updateInterfaceControls() {
      if (this.interval === null) {
        this.el.control.innerHTML = `<span class="material-icons">play_arrow</span>`;
        this.el.control.classList.add("timer__btn--start");
        this.el.control.classList.remove("timer__btn--stop");
      } else {
        this.el.control.innerHTML = `<span class="material-icons">pause</span>`;
        this.el.control.classList.add("timer__btn--stop");
        this.el.control.classList.remove("timer__btn--start");
      }
    }

    start() {
      if (this.remainingSeconds === 0) return;

      this.interval = setInterval(() => {
        this.remainingSeconds--;
        this.updateInterfaceTime();

        if (this.remainingSeconds === 0) {
          this.stop();
        }
      }, 1000);

      this.updateInterfaceControls();
    }

    stop() {
      clearInterval(this.interval);

      this.interval = null;

      this.updateInterfaceControls();
    }

    static getHTML() {
      return `
  			<span class="timer__part timer__part--minutes">00</span>
  			<span class="timer__part">:</span>
  			<span class="timer__part timer__part--seconds">00</span>
  			<button type="button" class="timer__btn timer__btn--control timer__btn--start">
  				<span class="material-icons">play_arrow</span>
  			</button>
  			<button type="button" class="timer__btn timer__btn--reset">
  				<span class="material-icons">timer</span>
  			</button>
  		`;
    }
  }

  new Timer(
  	document.querySelector(".timer")
  );
  </script>
  <br><br>
  <h2>Goals:</h2>
  <% for (goal of Object.values(goals)){ %>
    <p><b><%=goal.Title%>:</b></p>
    <p><%=goal.Type%>: <%=goal.Number%></p>
    <p>Time Limit: <%=goal.TimeLimit%></p>
  <%}%>
  <br><br>
  <form action="/essay/createEssay" method="POST">
    <div class="lab"><label for="Title">Title:</label></div>
    <input type="text" id="Title" name="Title" required><br><br>
  <div class="lab"><label for="Text">Write here:</label></div>
  <textarea id="Text" name="Text" rows="150" cols="120" required></textarea><br>
  <br>
  <input type="submit" value="Publish"> <span class="glyphicon glyphicon-level-up"></span>
</form>
</div>

</html>
